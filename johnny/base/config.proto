// -*- mode: protobuf -*-
// Configuration for Johnny.
//
// This schema is designed for input to the application that contains account
// configuration setups and manual clusterings for trades (it is not always
// possible to split logical trades correctly automatically in the same
// account).
//
//   Copyright (C) 2021  Martin Blais
//   License: GNU GPLv2

syntax = "proto2";

package johnny;

// Configuration for returns script.
message Config {
  // Input configuration.
  optional Inputs input = 1;

  // A list of manually disambiguated trades and their annotations.
  repeated Chain chains = 2;

  // Explicitly linked transactions or orders. These lists can be used to join
  // together pairs that would otherwise be resolved to independent chains. Note
  // that it is legitimate to link together orders from different accounts.
  // Differences in trading time across platforms, e.g. on the EXT session,
  // sometimes require us to cross-trade between accounts for hedging.
  repeated Link transaction_links = 3;
  repeated Link order_links = 4;

  // Available prices for opening positions. Positions having to be inserted
  // synthetically to fill in the opening balances will require being priecd.
  // Fetching these prices is done automatically via the TD API, but it's
  // convenient to store these in the configuration (they will never change if
  // you restart from the same specific date) or to enter them manually, if you
  // don't have access to the TD API.
  repeated Price prices = 5;
}

// Configuration for inputs to be imported.
message Inputs {
  // A list of account sources to pull data from.
  repeated Account accounts = 1;
}

// The declaration of an account source. Only declared accounts are ingested.
// A declaration might look like this:
//   accounts {
//     nickname: "tasty"
//     logtype: TRANSACTIONS
//     module: "johnny.sources.tastyworks_csv.transactions"
//     source: "/home/joesmith/Downloads/*-AccountStatement.csv"
//   }
//
message Account {
  // A short and unique nickname or alias for the account. This should be
  // something you don't mind sharing publicly. The account name will me
  // replaced by this nickname for privacy reasons. If this isn't set, the
  // account number will be kept as is.
  optional string nickname = 1;

  // Importer type: transactions or positions.
  enum LogType {
    TRANSACTIONS = 1;
    POSITIONS = 2;
  }
  optional LogType logtype = 2;

  // Source module to use. This is a Python module-level path. This can be of
  // the form 'johnny.source.tastyworks_csv.transactions' for example.
  optional string module = 3;

  // A globbing pattern, URL, or other data telling the importer where to find
  // the files to import. If more than a single file matches, only the latest
  // file (by timestamp) will be imported. This is in essence, the configuration
  // across all possible sources, which are expected to be local files. In order
  // to contain dependencies, updating these local caches of remote transactions
  // logs should be done in separate programs using whichever APIs are
  // necessary; this library merely imports them into a single normalized
  // database.
  optional string source = 4;
}

// An explicit linkage between multiple transactions.
message Link {
  optional string comment = 1;
  repeated string ids = 2;
}

// A trade chain.
message Chain {
  // The chain id of a trade. This is a unique string computed in the front end.
  optional string chain_id = 1;

  // User-associated trade type.
  optional string trade_type = 2;

  // User-provided description. Free-form, may span multiple lines (include
  // newlines).
  optional string comment = 3;

  // If this is present, an explicit list of transaction ids that are part of
  // the trade. All the rows matching these transactions will be automatically
  // removed from the table and extracted as a unique chain. Make sure that
  // matches without these trades can resolve.
  repeated string transaction_ids = 4;

  // If this is present, an explicit list of order ids that are part of the
  // trade. All the rows matching these transactions will be automatically
  // removed from the table and extracted as a unique chain. Make sure that
  // matches without these trades can resolve.
  repeated string order_ids = 5;
}

// Declaration of asset vs. asset-class mapping.
message Asset {
  // Normalized instrument name.
  optional string instrument = 1;

  // Corresponding asset class, e.g. "EquityIndex", "Metals", "Rates", "Ags",
  // "Currencies", "Energy".
  optional string class = 2;

  // Factor. This is typically a sub-category of asset class. For example, asset
  // class would be "Metals", and factor might be "Copper" for FCX, COPX and
  // /HG.
  optional string factor = 3;
}

// Price database information. This is consulted to fill in costs for positions
// being opened synthetically at the start of the timespan of an import.
message Price {
  // Symbol being priced.
  optional string symbol = 1;

  // Date for the price point.
  optional Date date = 2;

  // A decimal rendering of the price to a string.
  optional string price = 3;
}

// A date.
message Date {
  optional int32 year = 2;
  optional int32 month = 3;
  optional int32 day = 4;
}
