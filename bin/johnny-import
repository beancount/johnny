#!/usr/bin/env python3
"""Import new transactions from sources into our local database.

This tool reads a configuration file with a specification for transactions and
positions input sources for each account, normalizes them, runs the chains
processing code and ingests them everything to its own local database of
normalized and matched transactions. The local database is the source of data
for various tools, such as Johnny's trade log and eventually monitoring tools as
well. This is intended to be runnable mid-day.
"""

__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

import logging
from typing import List, Optional

import click
import simplejson

from johnny.base import chains
from johnny.base import config as configlib
from johnny.base import discovery
from johnny.base import instrument
from johnny.base import match
from johnny.base.etl import Table


def ImportTransactions(config: configlib.Config) -> Table:
    """Read transactions, and do all necessary processing."""

    # Extract the explicit chains.
    transactions_chain_map, orders_chain_map = configlib.GetExplicitChains(config)

    # Read the inputs.
    logtables = discovery.ReadConfiguredInputs(config)
    transactions = logtables[configlib.Account.LogType.TRANSACTIONS]

    # Synthesize opening balances. We need to temporarily expand the instrument
    # fields, as they are needed by the match and chains modules.
    transactions = (transactions

                    # Run the matching process.
                    .applyfn(match.Process)

                    # Run the chains heuristic.
                    .applyfn(instrument.Expand, 'symbol')
                    .applyfn(chains.Group,
                             explicit_transactions_chain_map=transactions_chain_map,
                             explicit_orders_chain_map=orders_chain_map)
                    .applyfn(instrument.Shrink))

    return transactions


@click.command()
@click.option('--config', '-c', type=click.Path(exists=True),
              help="Configuration filename. Default to $JOHNNY_CONFIG")
def import_(config: Optional[str]):
    """Parse the configuration, the sources, transform, and save."""
    filename = configlib.GetConfigFilenameWithDefaults(config)
    config = configlib.ParseFile(filename)
    imported = ImportTransactions(config)
    imported.topickle(config.output.imported_filename)


if __name__ == '__main__':
    import_()
