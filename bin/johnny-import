#!/usr/bin/env python3
"""Import new transactions from sources into our local database.

This tool reads a configuration file with a specification for transactions and
positions input sources for each account, normalizes them, runs the chains
processing code and ingests them everything to its own local database of
normalized and matched transactions. The local database is the source of data
for various tools, such as Johnny's trade log and eventually monitoring tools as
well. This is intended to be runnable mid-day.
"""

__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

import logging
import traceback
import time
from typing import List, Optional, Tuple

import click
import simplejson

from johnny.base import chains as chainslib
from johnny.base import config as configlib
from johnny.base import discovery
from johnny.base import instrument
from johnny.base import match
from johnny.base import transactions as txnlib
from johnny.base.etl import Table


def ImportTransactions(config: configlib.Config,
                       force: bool) -> Tuple[Table, configlib.Config]:
    """Read transactions, and do all necessary processing."""

    # Read the inputs.
    logtables = discovery.ReadConfiguredInputs(config)
    transactions = logtables[configlib.Account.LogType.TRANSACTIONS]

    # TODO(blais): Move this to another function.

    # Check that the imports are sound before we process them and ensure that
    # the transaction ids are unique.
    unique_ids = set()
    try:
        for rec in transactions.records():
            unique_ids.add(rec.transaction_id)
            txnlib.ValidateTransactionRecord(rec)
    except Exception as exc:
        if force:
            traceback.print_last()
        else:
            raise
    num_txns = transactions.nrows()
    assert num_txns == len(unique_ids)

    # Match transactions to each other, synthesize opening balances, and mark
    # ending positions.
    return transactions.applyfn(match.Process)


@click.command()
@click.option('--config', '-c', type=click.Path(exists=True),
              help="Configuration filename. Default to $JOHNNY_CONFIG")
@click.option('--force', '-f', is_flag=True,
              help="For import even if validation fails.")
def import_(config: Optional[str], force: bool):
    """Parse the configuration, the sources, transform, and save."""
    filename = configlib.GetConfigFilenameWithDefaults(config)
    config = configlib.ParseFile(filename)
    transactions = ImportTransactions(config, force)
    ctransactions, cconfig = chainslib.ChainTransactions(transactions, config)
    ctransactions.topickle(config.output.imported_filename)

    # Run table chain aggregator once, just to make sure it won't trigger errors
    # later.
    chainslib.TransactionsTableToChainsTable(ctransactions, cconfig)


if __name__ == '__main__':
    import_()
