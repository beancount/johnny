#!/usr/bin/env python3
"""Read and clean up the configuration.

This tool reads the database and removes invalid chains, insert missing ones,
and prints out the corrected configuration. You can then edit this manually.
"""
__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

import copy
import logging
from typing import List, Optional

import click

from johnny.base import discovery
from johnny.base import consolidate
from johnny.base import instrument
from johnny.base.etl import Table
from johnny.base import config as configlib


@click.command()
@click.argument('config_filename', type=click.Path(exists=True))
@click.argument('clean_config', type=click.Path(exists=False))
@click.argument('residual_config', type=click.Path(exists=False))
@click.option('--ledger', '-l', type=click.Path(exists=False),
              help="Remove transactions from Ledger. Requires order ids.")
def chains(config_filename: str,
           clean_config: str,
           residual_config: str,
           ledger: Optional[str]):
    "Find, process and print positions."

    _, __, chains, config = consolidate.ConsolidateChains(config_filename, ledger)

    # A copy of the original proto, to be cleaned up.
    clean = copy.copy(config)
    clean.ClearField('chains')

    # Move invalid chains to residual.
    residual = configlib.Config()
    table_chain_ids = set(chains.values('chain_id'))
    for chain in config.chains:
        dest = clean if chain.chain_id in table_chain_ids else residual
        new_chain = dest.chains.add()
        new_chain.CopyFrom(chain)

    # Add missing chains to the proto.
    config_chain_ids = {chain.chain_id for chain in clean.chains}
    for chain_id in table_chain_ids:
        if chain_id not in config_chain_ids:
            new_chain = clean.chains.add()
            new_chain.chain_id = chain_id

    with open(residual_config, 'w') as outfile:
        print(residual, file=outfile)
    with open(clean_config, 'w') as outfile:
        print(clean, file=outfile)


if __name__ == '__main__':
    chains()
