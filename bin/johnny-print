#!/usr/bin/env python3
"""Command-line input file converter and printer for Johnny.

This tool
- Auto-detects all input sources and their types, from filenames and directories
  of files.
- Parses them, and normalizes them.
- Validates them.
- Prints out their contents on the command-line (or to a file).

This tool is also able to join transactions and positions and print out
aggregates at the chain (trade) level.

The purpose of this tool is to
- Make it straightforward to debug input file parsing and conversion,
- Work from the command-line.

NOTE: This script will be replaced to print from the local database eventually.
We will have an import stage that does all the processing at once, and this will
be used to extract a portion of that local processed file, or we will remove
this.
"""

__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

import logging
from typing import List, Optional

import click

from johnny.base import discovery
from johnny.base import config as configlib
from johnny.base import consolidate
from johnny.base import instrument
from johnny.base.etl import Table


@click.group()
@click.option('--expand', '-e', is_flag=True,
              help="Expand instrument symbol before output")
@click.pass_context
def cli(ctx: click.Context, expand: bool):
    "General purpose command-line printer tool."
    logging.basicConfig(level=logging.INFO, format='%(levelname)-8s: %(message)s')
    ctx.obj['expand'] = expand


def GetLogTables(config_filename: str, logtype: int) -> Table:
    """Process the log tables."""
    config = configlib.ParseFile(config_filename)
    logtables = discovery.ReadConfiguredInputs(config)
    return logtables[logtype]


@cli.command()
@click.argument('config_filename')
@click.pass_context
def transactions(ctx: click.Context, config_filename: str):
    "Find, process and print transactions."
    table = GetLogTables(config_filename, configlib.Account.LogType.TRANSACTIONS)
    print_table(table, ctx.obj['expand'])


@cli.command()
@click.argument('config_filename')
@click.pass_context
def positions(ctx: click.Context, config_filename: str):
    "Find, process and print positions."
    table = GetLogTables(config_filename, configlib.Account.LogType.POSITIONS)
    print_table(table, ctx.obj['expand'])


def print_table(table: Table, expand: bool):
    """Print the table, given the options."""
    if expand:
        table = instrument.Expand(table, 'symbol')
    print(table.lookallstr())


@cli.command()
@click.argument('config_filename', type=click.Path(exists=True))
@click.option('--ledger', '-l', type=click.Path(exists=False),
              help="Remove transactions from Ledger. Requires order ids.")
def chains(config_filename: str, ledger: Optional[str]):
    "Find, process and print positions."

    # Read in and consolidate all the data.
    _, __, chains, config = consolidate.ConsolidateChains(config_filename, ledger)
    print(chains.lookallstr())


if __name__ == '__main__':
    cli(obj={})
